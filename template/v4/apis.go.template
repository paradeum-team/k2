package apis

import (
	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"

	"github.com/kingwel-xie/k2/common/api"

	"{{.PackageName}}/models"
	"{{.PackageName}}/service"
	"{{.PackageName}}/service/dto"
)

type {{.ClassName}} struct {
	api.Api
}

// GetPage 获取{{.TableComment}}列表
// @Summary 获取{{.TableComment}}列表
// @Description 获取{{.TableComment}}列表
// @Tags {{.TableComment}}
{{- $tablename := .TBName -}}
{{- range .Columns -}}
{{$z := .Queryable}}
{{- if ($z) }}
// @Param {{.JsonField}} query {{.GoType}} false "{{.ColumnComment}}"
{{- end -}}
{{- end }}
// @Param pageSize query int false "页条数"
// @Param pageIndex query int false "页码"
// @Success 200 {object} response.Response{data=response.Page{list=[]models.{{.ClassName}}}} "{"code": 200, "data": [...]}"
// @Router /api/v1/{{.ModuleName}} [get]
// @Security Bearer
func (e {{.ClassName}}) GetPage(c *gin.Context) {
    s := service.{{.ClassName}}{}
    req := dto.{{.ClassName}}GetPageReq{}
    err := e.MakeContext(c).
        Bind(&req, binding.Form).
        MakeService(&s.Service).
        Errors
   	if err != nil {
        e.Error(err)
        return
   	}

	list := make([]models.{{.ClassName}}, 0)
	var count int64

	err = s.GetPage(&req, &list, &count)
	if err != nil {
        e.Error(err)
        return
	}

	e.PageOK(list, int(count), req.GetPageIndex(), req.GetPageSize(), "查询成功")
}

// Get 获取{{.TableComment}}
// @Summary 获取{{.TableComment}}
// @Description 获取{{.TableComment}}
// @Tags {{.TableComment}}
// @Param {{.PkJsonField}} path string true "{{.PkComment}}"
// @Success 200 {object} response.Response{data=models.{{.ClassName}}} "{"code": 200, "data": [...]}"
// @Router /api/v1/{{.ModuleName}}/{ {{- .PkJsonField -}} } [get]
// @Security Bearer
func (e {{.ClassName}}) Get(c *gin.Context) {
	s := service.{{.ClassName}}{}
	req := dto.{{.ClassName}}GetReq{}
    err := e.MakeContext(c).
        Bind(&req, nil).
        MakeService(&s.Service).
        Errors
	if err != nil {
        e.Error(err)
        return
	}

	var object models.{{.ClassName}}
	err = s.Get(&req, &object)
	if err != nil {
        e.Error(err)
        return
	}

	e.OK(object, "查询成功")
}

// Insert 创建{{.TableComment}}
// @Summary 创建{{.TableComment}}
// @Description 创建{{.TableComment}}
// @Tags {{.TableComment}}
// @Accept application/json
// @Product application/json
// @Param data body dto.{{.ClassName}}InsertReq true "data"
// @Success 200 {object} response.Response	"{"code": 200, "message": "创建成功", "data": {{.PkJsonField -}} }"
// @Router /api/v1/{{.ModuleName}} [post]
// @Security Bearer
func (e {{.ClassName}}) Insert(c *gin.Context) {
    s := service.{{.ClassName}}{}
    req := dto.{{.ClassName}}InsertReq{}
    err := e.MakeContext(c).
        Bind(&req, binding.JSON).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Error(err)
        return
    }
	err = s.Insert(&req)
	if err != nil {
        e.Error(err)
        return
	}
	e.OK(req.GetId(), "创建成功")
}

// Update 修改{{.TableComment}}
// @Summary 修改{{.TableComment}}
// @Description 修改{{.TableComment}}
// @Tags {{.TableComment}}
// @Accept application/json
// @Product application/json
// @Param {{.PkJsonField}} path string true "{{.PkComment}}"
// @Param data body dto.{{.ClassName}}UpdateReq true "body"
// @Success 200 {object} response.Response	"{"code": 200, "message": "更新成功", "data": {{.PkJsonField -}} }"
// @Router /api/v1/{{.ModuleName}}/{ {{- .PkJsonField -}} } [put]
// @Security Bearer
func (e {{.ClassName}}) Update(c *gin.Context) {
    s := service.{{.ClassName}}{}
    req := dto.{{.ClassName}}UpdateReq{}
    err := e.MakeContext(c).
        Bind(&req, binding.JSON, nil).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Error(err)
        return
    }
	err = s.Update(&req)
	if err != nil {
	    e.Error(err)
        return
	}
	e.OK(req.GetId(), "更新成功")
}

// Delete 删除{{.TableComment}}
// @Summary 删除{{.TableComment}}
// @Description 删除{{.TableComment}}
// @Tags {{.TableComment}}
// @Param data body dto.{{.ClassName}}DeleteReq true "body"
// @Success 200 {object} response.Response	"{"code": 200, "message": "删除成功", "data": [...]}"
// @Router /api/v1/{{.ModuleName}} [delete]
// @Security Bearer
func (e {{.ClassName}}) Delete(c *gin.Context) {
    s := service.{{.ClassName}}{}
    req := dto.{{.ClassName}}DeleteReq{}
    err := e.MakeContext(c).
        Bind(&req, binding.JSON).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Error(err)
        return
    }

	err = s.Remove(&req)
	if err != nil {
        e.Error(err)
        return
	}
	e.OK(req.GetId(), "删除成功")
}
